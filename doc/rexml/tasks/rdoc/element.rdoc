== Class Element

Class Element has methods from its superclasses and included modules;
see:

- {Tasks for Parent}[parent_rdoc.html].
- {Tasks for Child}[child_rdoc.html].
- {Tasks for Node}[node_rdoc.html].
- {Module Enumerable}[https://docs.ruby-lang.org/en/master/Enumerable.html].

:include: ../tocs/element_toc.rdoc

=== New Element

==== Task: Create a Default Element

Use method
{Element::new}[../../../../REXML/Element.html#method-c-new]
with no arguments to create a default element:

  e = REXML::Element.new
  e.name    # => "UNDEFINED"
  e.parent  # => nil
  e.context # => nil

==== Task: Create a Named Element

Use method
{Element::new}[../../../../REXML/Element.html#method-c-new]
with a string name argument
to create a named element:

  e = REXML::Element.new('foo')
  e.name    # => "foo"
  e.parent  # => nil
  e.context # => nil

==== Task: Create an Element with Name and Parent

Use method
{Element::new}[../../../../REXML/Element.html#method-c-new]
with name and parent arguments
to create an element with name and parent:

  p = REXML::Parent.new
  e = REXML::Element.new('foo', p)
  e.name    # => "foo"
  e.parent  # => #<REXML::Parent @parent=nil, @children=[<foo/>]>
  e.context # => nil

==== Task: Create an Element with Name, Parent, and Context

Use method
{Element::new}[../../../../REXML/Element.html#method-c-new]
with name, parent, and context arguments
to create an element with name, parent, and context:

  p = REXML::Parent.new
  e = REXML::Element.new('foo', p, {compress_whitespace: :all})
  e.name    # => "foo"
  e.parent  # => #<REXML::Parent @parent=nil, @children=[<foo/>]>
  e.context # => {:compress_whitespace=>:all}

==== Task: Create a Shallow Clone

Use method
{Element#clone}[../../../../REXML/Element.html#method-i-clone]
to create a shallow clone of an element,
copying only the name, attributes, and context:

  e0 = REXML::Element.new('foo', nil, {compress_whitespace: :all})
  e0.add_attribute(REXML::Attribute.new('bar', 'baz'))
  e0.context = {compress_whitespace: :all}
  e1 = e0.clone # => <foo bar='baz'/>
  e1.name # => "foo"
  e1.context # => {:compress_whitespace=>:all}

=== Attributes

==== Task: Create and Add an Attribute

Use method
{Element#add_attribute}[../../../../REXML/Element.html#method-i-add_attribute]
to create and add an attribute:

  e = REXML::Element.new
  e.add_attribute('attr', 'value') # => "value"
  e['attr'] # => "value"
  e.add_attribute('attr', 'VALUE') # => "VALUE"
  e['attr'] # => "VALUE"

==== Task: Add an Existing Attribute

Use method
{Element#add_attribute}[../../../../REXML/Element.html#method-i-add_attribute]
to add an existing attribute:

  e = REXML::Element.new
  a = REXML::Attribute.new('attr', 'value')
  e.add_attribute(a)
  e['attr'] # => "value"
  a = REXML::Attribute.new('attr', 'VALUE')
  e.add_attribute(a)
  e['attr'] # => "VALUE"

==== Task: Add Multiple Attributes from a Hash

Use method
{Element#add_attributes}[../../../../REXML/Element.html#method-i-add_attributes]
to add multiple attributes from a hash:

  e = REXML::Element.new
  h = {'foo' => 0, 'bar' => 1}
  e.add_attributes(h)
  e['foo'] # => "0"
  e['bar'] # => "1"

==== Task: Add Multiple Attributes from an Array

Use method
{Element#add_attributes}[../../../../REXML/Element.html#method-i-add_attributes]
to add multiple attributes from an array:

  e = REXML::Element.new
  a = [['foo', 0], ['bar', 1]]
  e.add_attributes(a)
  e['foo'] # => "0"
  e['bar'] # => "1"

==== Task: Retrieve the Value for aa Attribute Name

Use method
{Element#[]}[../../../../REXML/Element.html#method-i-5B-5D]
to retrieve the value for an attribute name:

  e = REXML::Element.new
  e.add_attribute('attr', 'value') # => "value"
  e['attr'] # => "value"

==== Task: Retrieve the Attribute Value for a Name and Namespace

Use method
{Element#attribute}[../../../../REXML/Element.html#method-i-attribute]
to retrieve the value for an attribute name:

  xml_string = "<root xmlns:a='a' a:x='a:x' x='x'/>"
  d = REXML::Document.new(xml_string)
  e = d.root
  e.attribute("x")      # => x='x'
  e.attribute("x", "a") # => a:x='a:x'

==== Task: Delete an Attribute

Use method
{Element#delete_attribute}[../../../../REXML/Element.html#method-i-delete_attribute]
to remove an attribute:

  e = REXML::Element.new('foo')
  e.add_attribute('bar', 'baz')
  e.delete_attribute('bar')
  e.delete_attribute('bar')
  e['bar'] # => nil

==== Task: Determine Whether the Element Has Attributes

Use method
{Element#has_attributes?}[../../../../REXML/Element.html#method-i-has_attributes-3F]
to determine whether the element has attributes:

  e = REXML::Element.new('foo')
  e.has_attributes? # => false
  e.add_attribute('bar', 'baz')
  e.has_attributes? # => true

=== Children

#[index]
#add_element
#add_text
#cdatas
#comments
#instructions
#delete_element
#get_elements
#get_text
#has_elements?
#has_text?
#next_element
#previous_element
#text
#text=
#cdatas
#comments
#instructions
#texts

=== Namespaces

#add_namespace
#delete_namespace
#namespace
#namespaces
#prefixes

=== Iteration

#each_element
#each_element_with_attribute
#each_element_with_text

=== Context

#whitespace
#ignore_whitespace_nodes
#raw



#document
#node_type
#root
#root_node
#xpath
#inspect
